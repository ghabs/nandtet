// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aIns);
    Not(in=aIns, out=cIns);

    And(a=cIns, b=instruction[5], out=aluA); 
    Mux16(a=instruction,b=outMval,sel=aluA,out=regloadA);
    //Register A
    Or(a=aIns,b=aluA,out=loadA); 
    ARegister(in=regloadA,load=loadA,out=regA);
    // Updates ALU based on if from memory or from A register
    Mux16(a=regA,b=inM,sel=instruction[12],out=aorm);


    //Load D Register
    And(a=cIns, b=instruction[4], out=loadD);
    DRegister(in=outMval,load=loadD,out=regD);

    //ALU
    ALU(x=regD,y=aorm,zx=instruction[11],nx=instruction[10],
        zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
        out=outMval,zr=zr,ng=ng);
    
    Or16(a=false,b=outMval,out=outM);
    Or16(a=false,b=regA,out[0..14]=addressM);
    And(a=cIns,b=instruction[3],out=writeM);

    //The PC part needs to also feed in inputs to determine where it jumps to next
    Not(in=ng,out=gte);
    Not(in=zr,out=nzr);
    And(a=gte,b=nzr,out=gtz);

    //Greater than or equal to zero jumps
    And(a=instruction[0],b=gtz,out=jgt);
    And(a=zr,b=instruction[1],out=jeq);
    And(a=jgt,b=jeq,out=jge);

    And(a=instruction[2],b=ng,out=jlt);
    Or(a=jeq,b=jlt,out=jle);
    Or(a=jle,b=jgt,out=jmpA);
    And(a=cIns,b=jmpA,out=loadPC);
    Not(in=loadPC,out=incPC); 
    PC(in=regA,reset=reset,load=loadPC,inc=incPC,out[0..14]=pc);
}